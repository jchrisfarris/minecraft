AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy a Minecraft Server & Alexa Skill
Transform: AWS::Serverless-2016-10-31


Parameters:

  pBucketName:
    Description: S3 Bucket with Backups & logs
    Type: String

  pTemplateURL:
    Description: URL of the transformed Template
    Type: String

  pKeyName:
    Description: KeyName for instances
    Type: AWS::EC2::KeyPair::KeyName

  pHostedZoneId:
    Description: Hosted Zone ID to register the public IP
    Type: String
    Default: NONE

  pAdminIpAddress:
    Description: This IP Address is allowed to ssh to the server instance
    Type: String

  pServiceFQDN:
    Description: FQDN of the instance Host. domain name must match the Hosted Zone ID
    Type: String

  pBedtimeCron:
    Description: Cron Expression in GMT for Shutdown
    Type: String
    Default: cron(0 01 * * ? *)

  pStartCronWeekDay:
    Description: Cron Expression in GMT for startup on a weekday
    Type: String
    Default: cron(0 17 ? * MON-FRI *)

  pStartCronWeekEnd:
    Description: Cron Expression in GMT for startup on a weekend
    Type: String
    Default: cron(0 17 ? * SAT,SUN *)

  pServerInitialize:
    Description: Should the server create a new server, or load the most recent server from S3
    Type: String
    AllowedValues:
      - CreateServer
      - RestoreServer

  pServerName:
    Description: Internal name of the minecraft server (used by msm)
    Type: String
    Default: minecraft

  InstanceType:
    Description: Instance Type
    Type: String
    Default: t3.small

  ImageId:
    Description: AMI ID for AmazonLinux2 in the Region you're deploying in
    Type: AWS::EC2::Image::Id
    Default: ami-02da3a138888ced85 # Amazon Linux 2 in us-east-1

  pDefaultLambdaSize:
    Description: Size to assign to all Lambda
    Type: Number
    Default: 3006

  pMaxLambdaDuration:
    Description: How long to let the Lambda Run (in seconds)
    Type: Number
    Default: 90

  pAlexaClientSecret:
    Description: Login With Amazon Client ID required for deploying Skill from https://developer.amazon.com/loginwithamazon/console/site/lwa/overview.html
    Type: String
    Default: NONE

  pSkillPackage:
    Description: Skill Package to Deploy
    Type: String


Globals:
  Function:
    Runtime: python3.7
    MemorySize: !Ref pDefaultLambdaSize
    Timeout: !Ref pMaxLambdaDuration
    Environment:
      Variables:
          LOG_LEVEL: 'INFO'
          BUCKET: !Ref pBucketName
          SERVER_FQDN: !Sub "${pServiceFQDN}"
          INSTANCE_ID: !Ref ServerInstance

Conditions:
  cDeployAlexa: !Not [ !Equals [ !Ref pAlexaClientSecret, "NONE"] ]
  cRoute53: !Not [ !Equals [ !Ref pHostedZoneId, "NONE"] ]


Resources:
  #
  # Server Instance itself
  #

  StaticIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref ServerInstance

  ServerInstance:
    Type: AWS::EC2::Instance
    CreationPolicy:
      ResourceSignal:
        Count: '1'
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        # Docs: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
        configSets:
          CreateServer:
            - "InstallMinecraft"
            - "CreateServer"
          RestoreServer:
            - "InstallMinecraft"
            - "RestoreServer"
        InstallMinecraft:
          commands:
            install:
              command: "curl https://raw.githubusercontent.com/jchrisfarris/minecraft/master/scripts/install.sh | bash"
              cwd: "/home/ec2-user"
              ignoreErrors: "false"
          files:
            /etc/minecraft.conf:
              content: !Sub |
                STACKNAME=${AWS::StackName}
                SERVERHOSTNAME=${pServiceFQDN}
                BUCKET=${pBucketName}
              mode: "000644"
              owner: "root"
              group: "root"
          services:
            sysvinit:
              msm:
                enabled: "true"
                ensureRunning: "true"
        CreateServer:
          commands:
            install:
              command: "/home/ec2-user/scripts/new_world.sh"
              cwd: "/home/ec2-user"
              ignoreErrors: "false"
        RestoreServer:
          commands:
            install:
              command: "/home/ec2-user/scripts/restore.sh"
              cwd: "/home/ec2-user"
              ignoreErrors: "false"
    Properties:
      ImageId: !Ref ImageId
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref ServerSecurityGroup
      KeyName: !Ref 'pKeyName'
      IamInstanceProfile: !Ref ServerInstanceProfile
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
      UserData:
        Fn::Base64:
          !Sub |
              #!/bin/bash -x
              /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ServerInstance --configsets ${pServerInitialize} --region ${AWS::Region}
              /opt/aws/bin/cfn-signal -e 0 --region ${AWS::Region} --stack ${AWS::StackName} --resource ServerInstance

  ServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow external Addresses to SSH to Instance Host
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref 'pAdminIpAddress'
          Description: Remote Admin
        - IpProtocol: tcp
          FromPort: '25565'
          ToPort: '25565'
          CidrIp: !Ref 'pAdminIpAddress'
          Description: Minecraft
      Tags:
        - Key: Name
          Value: MinecraftServerSecurityGroup

  ServerInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ServerInstanceRole

  DNSRecord:
    # We need this to create the DNS record when the instance is first created.
    Type: AWS::Route53::RecordSet
    Condition: cRoute53
    Properties:
      HostedZoneId: !Ref pHostedZoneId
      Name: !Sub "${pServiceFQDN}"
      ResourceRecords:
        - !Ref StaticIP
      TTL: 30
      Type: A

  #
  # IAM Roles
  #
  ServerInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Policies:
      - PolicyName: CloudWatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - cloudwatch:*
            Effect: Allow
            Resource: '*'
      - PolicyName: EC2DescribeInstances
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - ec2:Describe*
            Effect: Allow
            Resource: '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: Route53
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: !Sub arn:aws:route53:::hostedzone/${pHostedZoneId}
            Action:
            - Route53:ChangeResourceRecordSets
            Effect: Allow
      - PolicyName: S3Access
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource:
            - !Sub arn:aws:s3:::${pBucketName}
            - !Sub arn:aws:s3:::${pBucketName}/*
            Action:
            - s3:*
            Effect: Allow

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: CloudWatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - cloudwatch:*
            Effect: Allow
            Resource: '*'
      - PolicyName: EC2DescribeInstances
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - ec2:Describe*
            Effect: Allow
            Resource: '*'
      - PolicyName: logs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: '*'
            Action:
            - logs:*
            Effect: Allow
      - PolicyName: Route53
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Resource: !Sub arn:aws:route53:::hostedzone/${pHostedZoneId}
            Action:
            - Route53:ChangeResourceRecordSets
            Effect: Allow
      - PolicyName: StartStopInstances
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - ec2:StopInstances
            - ec2:StartInstances
            - ssm:SendCommand
            Effect: Allow
            Resource:
              - !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${ServerInstance}
      - PolicyName: InvokeLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
              - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${AWS::StackName}-start-stop
      - PolicyName: SSMCommands
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - ssm:SendCommand
            Effect: Allow
            Resource:
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${ExecScriptDocument}
              - !Sub arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:document/${MSMCommandDocument}
              - !Sub arn:aws:s3:::${pBucketName}/ssm_commands

  S3BucketReadRole:
    Condition: cDeployAlexa
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - alexa-appkit.amazon.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: SkillDeploymentPermission
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action:
            - s3:Get*
            - s3:List*
            Effect: Allow
            Resource:
            - !Sub arn:aws:s3:::${pBucketName}
            - !Sub arn:aws:s3:::${pBucketName}/*
  #
  # Automatic Server Shutdown at bedtime
  #
  StartStopServerLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-start-stop"
      Description: Process commands to the Minecraft Server
      Handler: command.lambda_handler
      CodeUri: ../lambda
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          EXECSCRIPT: !Ref ExecScriptDocument
          MSMCOMMAND: !Ref MSMCommandDocument
      Events:
        StopServer:
          Type: Schedule
          Properties:
            Schedule: !Ref pBedtimeCron
            Input:  !Sub |
              {"command": "stop"}
        StartWeekDay:
          Type: Schedule
          Properties:
            Schedule: !Ref pStartCronWeekDay
            Input:  !Sub |
              {"command": "start"}
        StartWeekEnd:
          Type: Schedule
          Properties:
            Schedule: !Ref pStartCronWeekEnd
            Input:  !Sub |
              {"command": "start"}

  #
  # SSM Commands
  #
  MSMCommandDocument:
    Type: "AWS::SSM::Document"
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: "executes an MSM command on a specific server"
        parameters:
          Server:
            type: "String"
            description: "Server Name"
            default: !Ref AWS::StackName
          Command:
            type: "String"
            description: "MSM Command and params to execute"
        mainSteps:
        - action: "aws:runShellScript"
          name: "msm"
          inputs:
            runCommand:
            - "echo \"`date` /bin/msm {{Server}} {{Command}}\" >> /tmp/msm_commands.log"
            - "tail -1 /tmp/msm_commands.log"
            - "/bin/msm {{Server}} {{Command}}"
            workingDirectory: "/home/ec2-user"

  ExecScriptDocument:
    Type: "AWS::SSM::Document"
    Properties:
      DocumentType: Command
      Content:
        schemaVersion: "2.2"
        description: "executes a script on the minecraft instance"
        parameters:
          Command:
            type: "String"
            description: "Script and params to execute"
        mainSteps:
        - action: "aws:runShellScript"
          name: "msm"
          inputs:
            runCommand:
            - "echo \"`date` /home/ec2-user/scripts/{{Command}}\" >> /tmp/ssm_commands.log"
            - "tail -1 /tmp/ssm_commands.log"
            - "/home/ec2-user/scripts/{{Command}}"
            workingDirectory: "/home/ec2-user"

  #
  # Alexa fun
  #
  AlexaSkillHandlerFunction:
    Condition: cDeployAlexa
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-alexa-handler"
      Description: Handle Alexa Intents for this Minecraft Server
      Handler: alexa_skill.lambda_handler
      CodeUri: ../lambda
      Role: !GetAtt LambdaExecutionRole.Arn
      Environment:
        Variables:
          CONTROL_LAMBDA: !GetAtt StartStopServerLambda.Arn
      Events:
        AlexaSkill:
          Type: AlexaSkill
          Properties:
             SkillId: !Ref MinecraftSkill

  MinecraftSkill:
    Type: "Alexa::ASK::Skill"
    Condition: cDeployAlexa
    Properties:
      SkillPackage:
        S3Bucket: !Ref pBucketName
        S3Key: !Ref pSkillPackage
        S3BucketRole: !GetAtt S3BucketReadRole.Arn
        Overrides:
          Manifest:
            apis:
              custom:
                endpoint:
                  uri: !GetAtt AlexaSkillHandlerFunction.Arn
            publishingInformation:
              locales:
                en-US:
                  name: !Sub "Alexa Skill for ${AWS::StackName}"
      AuthenticationConfiguration:
        ClientId: !Join ['', ['{{resolve:secretsmanager:', !Ref pAlexaClientSecret, ':SecretString:client_id}}' ]]
        ClientSecret: !Join ['', ['{{resolve:secretsmanager:', !Ref pAlexaClientSecret, ':SecretString:client_secret}}' ]]
        RefreshToken: !Join ['', ['{{resolve:secretsmanager:', !Ref pAlexaClientSecret, ':SecretString:refresh_token}}' ]]
      VendorId:  !Join ['', ['{{resolve:secretsmanager:', !Ref pAlexaClientSecret, ':SecretString:vendor_id}}' ]]

Outputs:
  STACKNAME:
    Value: !Ref 'AWS::StackName'
  SERVERHOSTNAME:
    Value: !Sub "${pServiceFQDN}"
  SERVERIP:
    Value: !Ref StaticIP
  INSTANCEID:
    Value: !Ref ServerInstance
  MSMCOMMAND:
    Value: !Ref MSMCommandDocument
  EXECSCRIPT:
    Value: !Ref ExecScriptDocument
  BUCKET:
    Value: !Ref pBucketName
  SecurityGroup:
    Value: !GetAtt ServerSecurityGroup.GroupId
  TemplateURL:
    Value: !Ref pTemplateURL
  SkillPackage:
    Condition: cDeployAlexa
    Value: !Ref pSkillPackage
  SkillURL:
    Condition: cDeployAlexa
    Value: !Sub "https://developer.amazon.com/alexa/console/ask/build/custom/${MinecraftSkill}/development/en_US/dashboard"

